@import url('https://fonts.googleapis.com/css2?family=Source+Code+Pro&display=swap');
@tailwind base;
@tailwind components;
@tailwind utilities;

.CodeMirror {
  height: 100% !important;
}

@layer components {
  /* 모달 컴포넌트 클래스들 */
  .modal-wrapper {
    @apply flex flex-col border border-transparent shadow-md rounded-xl fixed inset-0 m-auto bg-white z-10 tracking-wider bg-blue-400 justify-center items-center;
  }

  .modal-wrapper-hidden {
    @apply hidden;
  }

  .close-button {
    @apply bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded;
  }

  .bg-bamboo {
    background-image: url('/images/bg-bamboo.png');
    background-size: cover;
    background-repeat: no-repeat;
  }

  /* 시맨틱 컴포넌트를 위한 클래스들 */
  .wrapper {
    @apply flex flex-col items-center justify-center;
  }

  .line {
    @apply w-6/4 border border-solid border-opacity-5;
  }

  .pink-button {
    @apply h-8 text-white text-xs font-semibold bg-pink-300 border-none rounded px-4 mx-2 cursor-pointer;
  }

  .header {
    @apply flex flex-col bg-orange-300 ;
  }

  .main {
    @apply bg-red-300 flex flex-col;
  }

  .article {
    @apply flex flex-col bg-green-300;
  }

  .section {
    @apply flex flex-col bg-blue-300;
  }
  
  .footer {
    @apply flex justify-between items-center;
  }

  .overlay {
    @apply absolute w-full h-full flex flex-col justify-center items-center z-10;
  }

}

@screen md {
  .modal-wrapper {
    @apply w-3/4 h-5/6 max-w-screen-lg
  }

  .wrapper {
    @apply w-5/12;
  }

  .header {
    @apply w-4/5;
  }

  .main {
    @apply w-4/5 h-4/5
  }

  .article {
    @apply w-3/5;
  }

  .section {
    @apply w-4/5;
  }

  /* .footer {
    @apply w-4/5;
  } */
}

body {
  padding: 0;
  margin: 0;
  min-height: 500vh;
  background-color: rgb(139, 201, 228);
  animation: body 1s linear;
}
@keyframes body {
  to {
    background-color: rgb(19, 48, 97);
  }
}

.progress {
  height: 3px;
  width: 0%;
  background-color: #fff;
  position: fixed;
  top: 0;
  left: 0;
  animation: progress 1s linear;
}
@keyframes progress {
  to {
    background-color: rgb(20, 255, 226);
    width: 100%;
  }
}

.cube-wrap {
  --size: 30vmin;
  position: fixed;
  top: 50%;
  left: 50%;
  width: 0;
  height: 0;
  perspective: 100vmin;
}
.cube {
  transform-style: preserve-3d;
  transform: rotateX(0deg) rotateZ(45deg) rotateY(-45deg);
  animation: cube 1s linear;
}
@keyframes cube {
  to {
    transform: rotateX(360deg) rotateZ(45deg) rotateY(-45deg);
  }
}

.side {
  position: absolute;
  width: var(--size);
  height: var(--size);
  background-color: #eee;
  backface-visibility: visible;
  top: calc(var(--size) * -.5);
  left: calc(var(--size) * -.5);
}
.top {
  background-color: #fff;
  transform: rotateX(90deg) translateZ(calc(var(--size) * .5));
}
.bottom {
  background-color: #999;
  transform: rotateX(90deg) translateZ(calc(var(--size) * -.5));
}
.left {
  background-color: #ccc;
  transform: rotateY(90deg) translateZ(calc(var(--size) * .5));
}
.right {
  background-color: #ddd;
  transform: rotateY(90deg) translateZ(calc(var(--size) * -.5));
}
.front {
  background-color: #aaa;
  transform: translateZ(calc(var(--size) * .5));
}
.back {
  background-color: #bbb;
  transform: translateZ(calc(var(--size) * -.5));
}

:root * {
  /* Pause the animation */
  animation-play-state: paused;
  /* Bind the animation to scroll */
  animation-delay: calc(var(--scroll) * -1s);
  /* These last 2 properites clean up overshoot weirdness */
  animation-iteration-count: 1;
  animation-fill-mode: both;
}